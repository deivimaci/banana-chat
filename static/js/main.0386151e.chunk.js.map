{"version":3,"sources":["assets/remove.svg","assets/banana.svg","components/post.component.jsx","redux/posts/posts.actions.js","components/feed-wall.component.jsx","components/create-post.component.jsx","components/header.component.jsx","components/main-page.component.jsx","App.js","redux/user/user.actions.js","redux/user/user.reducer.js","redux/posts/posts.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["module","exports","Post","post","userPicture","user","message","tags","id","image","dispatch","useDispatch","className","src","alt","length","split","map","tag","index","key","tagList","removeIcon","onClick","type","payload","deletePost","onPostDelete","FeedWall","posts","useSelector","state","CreatePost","inputEl","fileInputEl","tagEl","chance","Chance","useState","setMessage","validationMessage","setValidationMessage","postImage","setPostImage","fileName","setFileName","currentUser","imageUpload","e","preventDefault","file","target","files","name","getBase64","then","base64","Promise","resolve","reject","reader","FileReader","onloadend","result","readAsDataURL","clearValues","value","placeholder","ref","onInput","trim","validateInput","autoComplete","required","el","onChange","click","postToAdd","guid","first","picture","thumbnail","onSubmit","disabled","Header","logo","medium","MainPage","App","useEffect","fetch","response","json","setCurrentUser","results","INITIAL_STATE","userReducer","action","saveToLocalStorage","window","localStorage","setItem","JSON","stringify","getFromLocalStorage","parse","getItem","postsReducer","tempPosts","postIndex","findIndex","console","log","splice","combineReducers","middlewares","logger","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0386151e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/remove.b0172222.svg\";","module.exports = __webpack_public_path__ + \"static/media/banana.df6d4afe.svg\";","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { deletePost } from \"../redux/posts/posts.actions\";\r\nimport removeIcon from \"../assets/remove.svg\";\r\n\r\nimport \"../styles/post.styles.scss\";\r\n\r\nconst Post = ({ post: { userPicture, user, message, tags, id, image } }) => {\r\n  const dispatch = useDispatch();\r\n  const onPostDelete = id => dispatch(deletePost(id));\r\n\r\n  const tagList = (tags) => {\r\n    if (tags.length === 0) return null;\r\n    else return <div className=\"post-tags\">{ tags.split(' ').map((tag, index) => <span key={index}>@{tag}</span>) }</div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"post-container\">\r\n      <div className=\"user-photo\">\r\n        <img src={userPicture} alt=\"user\" />\r\n      </div>\r\n      <div className=\"user-name\">{user}</div>\r\n      <div className=\"post\">\r\n        {message}\r\n        { image && <img className=\"post-image\" src={image} alt=\"post-image\"></img> }\r\n        { tagList(tags) }\r\n      </div>\r\n      <img\r\n        src={removeIcon}\r\n        alt=\"remove post\"\r\n        className=\"remove\"\r\n        onClick={() => onPostDelete(id)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","export const loadPosts = () => ({\r\n    type: 'LOAD_POSTS'\r\n});\r\n\r\nexport const createPost = post => ({\r\n    type: 'CREATE_POST',\r\n    payload: { post }\r\n});\r\n\r\nexport const deletePost = id => ({\r\n    type: 'DELETE_POST',\r\n    payload: { id }\r\n})\r\n","import React from \"react\";\r\nimport Post from \"./post.component\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport \"../styles/feed-wall.styles.scss\";\r\n\r\nconst FeedWall = () => {\r\n  const { posts } = useSelector(state => state.posts);\r\n\r\n  return (\r\n    <div className=\"feed-wall-container\">\r\n      <div className=\"header\">The Feed</div>\r\n\r\n      <div className=\"scrollable\">\r\n        {posts.length <= 0 && (\r\n          <div className=\"empty\">Post feed is empty :(</div>\r\n        )}\r\n        {posts.map(post => (\r\n          <div key={post.id}>\r\n            <Post post={post} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FeedWall;\r\n","import React, { useState, useRef } from \"react\";\r\nimport \"../styles/create-post.styles.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createPost } from \"../redux/posts/posts.actions\";\r\nimport * as Chance from \"chance\";\r\n\r\nconst CreatePost = () => {\r\n  let inputEl;\r\n  let fileInputEl;\r\n  let tagEl;\r\n  const chance = new Chance();\r\n\r\n  const [message, setMessage] = useState('');\r\n  const [validationMessage, setValidationMessage] = useState(null);\r\n  const [postImage, setPostImage] = useState(null);\r\n  const [fileName, setFileName] = useState('No image selected');\r\n\r\n  const dispatch = useDispatch();\r\n  const { currentUser } = useSelector(state => state.user);\r\n\r\n  const imageUploadClick = () => {\r\n    fileInputEl.click(e => imageUpload(e));\r\n  }\r\n\r\n  const imageUpload = e => {\r\n    e.preventDefault();\r\n    const file = e.target.files[0];\r\n\r\n    if (file) {\r\n      setFileName(file.name);\r\n      getBase64(file).then(base64 => {\r\n        setPostImage(base64);\r\n      });\r\n    } else {\r\n      setFileName('No image selected');\r\n      setPostImage(null);\r\n    }\r\n  };\r\n\r\n  const getBase64 = file => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => resolve(reader.result);\r\n      reader.readAsDataURL(file);\r\n    });\r\n  };\r\n\r\n  const onSubmit = () => {\r\n\r\n    const postToAdd = {\r\n      id: chance.guid(),\r\n      user: currentUser.name.first,\r\n      image: postImage,\r\n      userPicture: currentUser.picture.thumbnail,\r\n      message,\r\n      tags: tagEl.value\r\n    };\r\n\r\n    dispatch(createPost(postToAdd));\r\n    clearValues();\r\n  };\r\n\r\n  const validateInput = (message) => {  \r\n    setMessage(message);\r\n    \r\n    setValidationMessage(null);\r\n    if (message.trim().length === 0) setValidationMessage('This input is required');\r\n    if (message.trim().length > 150) setValidationMessage('Message could only be 150 characters long')\r\n  }\r\n\r\n  const clearValues = () => {\r\n    inputEl.value = \"\";\r\n    tagEl.value = \"\";\r\n    setPostImage(null);\r\n    setFileName('No image selected');\r\n    setMessage('');\r\n  }\r\n\r\n  return (\r\n    <div className=\"create-container\">\r\n      <div className=\"header\">Create post</div>\r\n      <div className=\"note\">NOTE: POST CANNOT EXCEED 150 SYMBOLS</div>\r\n        <textarea\r\n\r\n          placeholder=\"Write your post here\"\r\n          name=\"message\"\r\n          ref={ref => inputEl = ref}\r\n          onInput={e => validateInput(e.target.value)}\r\n          autoComplete=\"off\"\r\n          className=\"post-input\"\r\n          required\r\n        />\r\n        <p className=\"validation-message\">{ validationMessage }</p>\r\n        <p>tags</p>\r\n        <input\r\n          placeholder=\"Tag somebody to your post\"\r\n          name=\"tags\"\r\n          autoComplete=\"off\"\r\n          className=\"tag-input\"\r\n          ref={el => (tagEl = el)}\r\n        />\r\n        <input\r\n          ref={ref => fileInputEl = ref}\r\n          className=\"upload-input\"\r\n          type=\"file\"\r\n          onChange={imageUpload}\r\n        ></input>\r\n        <button className=\"btn-upload\" onClick={() => imageUploadClick()}>Upload Image</button>\r\n        <p>{ fileName }</p>\r\n        <button type=\"reset\" className=\"btn-discard\" onClick={() => clearValues()}>\r\n          Discard\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn-create\"\r\n          onClick={() => onSubmit()}\r\n          disabled={ (postImage === null && message === '') || (postImage === null && validationMessage !== null) }\r\n        >\r\n          Create\r\n        </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePost;\r\n","import React from \"react\";\r\nimport \"../styles/header.styles.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport logo from \"../assets/banana.svg\";\r\n\r\nconst Header = () => {\r\n  const { currentUser } = useSelector(state => state.user);\r\n\r\n  return (\r\n    <div className=\"header-container\">\r\n      <div className=\"banana\">\r\n        <img src={logo} className=\"banana-logo\" alt=\"Banana Logo\" />\r\n        Banana Chat\r\n      </div>\r\n      {currentUser && (\r\n        <div className=\"header-title\">\r\n          Hello, {currentUser.name.first}\r\n          <img\r\n            className=\"user-picture\"\r\n            src={currentUser.picture.medium}\r\n            alt=\"profile\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"../styles/main-page.styles.scss\";\r\nimport FeedWall from \"./feed-wall.component\";\r\nimport CreatePost from \"./create-post.component\";\r\nimport Header from \"./header.component\";\r\n\r\nconst MainPage = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"container\">\r\n        <CreatePost />\r\n        <FeedWall />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport MainPage from \"./components/main-page.component\";\nimport { setCurrentUser } from \"./redux/user/user.actions\";\nimport { useDispatch } from 'react-redux';\nimport { loadPosts } from \"./redux/posts/posts.actions\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n \n  useEffect(() => {\n    dispatch(loadPosts());\n\n    fetch(\"https://randomuser.me/api/\")\n    .then(response => response.json())\n    .then(user => dispatch(setCurrentUser(user.results[0])));\n\n  }, [dispatch]);\n\n  return <MainPage />;\n}\n\nexport default App;\n","export const setCurrentUser = user => ({\r\n    type: 'SET_CURRENT_USER',\r\n    payload: user\r\n});\r\n","const INITIAL_STATE = {\r\n    currentUser: null\r\n}\r\n\r\nconst userReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'SET_CURRENT_USER':\r\n            return {\r\n                ...state,\r\n                currentUser: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default userReducer;","const INITIAL_STATE = {\r\n    posts: []\r\n}\r\n\r\nconst saveToLocalStorage = posts => {\r\n    window.localStorage.setItem('posts', JSON.stringify(posts));\r\n}\r\n\r\nconst getFromLocalStorage = () => JSON.parse(window.localStorage.getItem('posts'));\r\n\r\nconst postsReducer = (state = INITIAL_STATE, { type, payload }) => {\r\n    switch (type) {\r\n        case 'LOAD_POSTS': {\r\n\r\n            let posts = getFromLocalStorage();\r\n            if (posts === null) posts = [];\r\n\r\n            return {\r\n                ...state,\r\n                posts\r\n            }\r\n        }\r\n        case 'CREATE_POST' : {\r\n            saveToLocalStorage([payload.post, ...state.posts]);\r\n\r\n            return {\r\n                ...state,\r\n                posts: [payload.post, ...state.posts]\r\n            }\r\n        }\r\n        case 'DELETE_POST' : {\r\n            const tempPosts = [...state.posts];\r\n            const postIndex = state.posts.findIndex(post => post.id === payload.id);\r\n            console.log(postIndex);\r\n\r\n            tempPosts.splice(postIndex, 1);\r\n\r\n            saveToLocalStorage(tempPosts);\r\n\r\n            return {\r\n                ...state,\r\n                posts: tempPosts\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postsReducer;","import { combineReducers } from 'redux';\r\n\r\nimport userReducer from './user/user.reducer';\r\nimport postsReducer from './posts/posts.reducer'\r\n\r\nexport default combineReducers({\r\n    user: userReducer,\r\n    posts: postsReducer\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middlewares = [logger];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);"],"sourceRoot":""}